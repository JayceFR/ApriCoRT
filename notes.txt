Custom OS 

  Custom Kernel 
    
    Cross Compiler 
    A compiler that runs on platform A (host) but generates executables for platform B (target)
    Built the cross compiler from source code 
    So now the new gcc can be accessed by 
    i686-elf-gcc --version. 
    Nice!

    BootStrap assembly stub
    Now we write the bootstrap which bascially assigns some space for the stack pointer (16 KiB)
    then calls the main function of our C program i.e. the KERNEL 
    to assemble it use 
    i686-elf-as OS/boot.s -o boot.o
    Nice!

    Memory Management 

    Static or Dynamic 

    Static is fine but more loss of space. Could solve it programatically but it is inefficient 

    Dynamic solves the above issue. 
    But it comes with its own tradeoffs. 
    After dynmically allocating memory for different processes and after some of them complete. We now have 
    holes in the memory. These holes could sum up to be the amount of memory another process needs. 
    Compaction solves the problem by moving all the in use memory up by one. This is inefficient too.
    We could have a better placement algorithm


    Interupt handler 
    0x0000     | 0x00      | Divide by 0
    0x0004     | 0x01      | Reserved
    0x0008     | 0x02      | NMI Interrupt
    0x000C     | 0x03      | Breakpoint (INT3)
    0x0010     | 0x04      | Overflow (INTO)
    0x0014     | 0x05      | Bounds range exceeded (BOUND)
    0x0018     | 0x06      | Invalid opcode (UD2)
    0x001C     | 0x07      | Device not available (WAIT/FWAIT)
    0x0020     | 0x08      | Double fault
    0x0024     | 0x09      | Coprocessor segment overrun
    0x0028     | 0x0A      | Invalid TSS
    0x002C     | 0x0B      | Segment not present
    0x0030     | 0x0C      | Stack-segment fault
    0x0034     | 0x0D      | General protection fault
    0x0038     | 0x0E      | Page fault
    0x003C     | 0x0F      | Reserved
    0x0040     | 0x10      | x87 FPU error
    0x0044     | 0x11      | Alignment check
    0x0048     | 0x12      | Machine check
    0x004C     | 0x13      | SIMD Floating-Point Exception
    0x00xx     | 0x14-0x1F | Reserved
    0x0xxx     | 0x20-0xFF | User definable

    